@inherits ComponentBase
@inject NavigationManager Nav
@inject IHttpClientFactory _clientFactory

<div class="site-map">
    <i class="menu-dots bi bi-three-dots-vertical fs-16"></i>

    <ul class="list-unstyled">
        <li>

            <a @onclick='(() => TriggerTransition("/"))' class="link link-yellow-400 @Active["/"]">
                Home
            </a>
        </li>
        <li>
            <a @onclick='(() => TriggerTransition("/contact"))' class="link link-yellow-400 @Active["/contact"]">
                Contact Me
            </a>
        </li> 
    </ul>
</div>

@code {

    [Parameter]
    public bool Transition { get; set; }

    public Dictionary<string, string> Active { get; set; } = new();

    private string _url = "/";

    [Parameter]
    public EventCallback<bool> TransitionChanged { get; set; }

    public async Task TriggerTransition(string url)
    {
        if (_url == url) return;
        Active[_url] = string.Empty;
        _url = url;
        Active[_url] = "nav-link-active";
        Transition = true;
        await TransitionChanged.InvokeAsync(Transition);
        Timer timer = new();
        timer.Interval = 1100;
        timer.Elapsed += async (object? sender, ElapsedEventArgs args) =>
        {

            timer.Stop();
            await InvokeAsync(OnTransition);
        };
        timer.Start();
    }

    public async Task OnTransition()
    {
        Nav.NavigateTo(_url);
        Transition = false;
        await TransitionChanged.InvokeAsync(Transition);
    }

    protected override void OnInitialized()
    {
        Active.Add("/", string.Empty);
        Active.Add("/contact", string.Empty);
        Active.Add("/test", string.Empty);

        base.OnInitialized();
    }
}
