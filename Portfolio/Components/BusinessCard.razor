@inject IDbContextFactory<PortfolioDbContext> _factory
@inject ToastService _toast

@if (Initialized)
{

    <div class="mobile-business-card">
        <div class="business-card-body">
            <img src="/images/face2.png" id="card-logo" />
            <div class="letter-head">
                <div id="name-link">
                    Devin Freeman &emsp;
                </div>
                <div id="sub-name">
                    <span id="dev">Developer - </span>
                    <span id="titles">
                        Software, Data,  Web

                    </span>
                </div>
            </div>

            <div class="business-toast @ToastClass">
                <div class="d-inline-flex container-fluid px-0">
                    <a class="close link-red-500 ms-auto me-1"><i class="bi bi-x-circle"></i></a>
                </div>
                <div class="small text-800 text-center">
                    @ToastMessage
                </div>
            </div>
            <div class="viewport">

                <div class="link-list">

                    <div class="h4 text-800">Links to Me</div>
                    <ul class="fa-ul">
                        <li class="ps-0 ms-0 d-flex flex-column">
                            <a class="link icon-link icon-link-hover link-business-card fw-semibold" href="/pdf/Resumev2.pdf" target="_blank">
                                <span class="fa-li">
                                    @* <i class="fa fa-puzzle-piece fa-2xs text-tertiary"></i> *@
                                    <i id="resume" class="bi bi-file-earmark-person">
                                    </i>
                                </span>
                                <div class=" ms-auto">
                                    My Resume
                                </div>
                            </a>
                        </li>
                        <li class="ps-0 ms-0 d-flex flex-column">
                            <a class="link icon-link icon-link-hover link-business-card fw-semibold" href="mailto:dfreem987@gmail.com" target="_blank">
                                <span class="fa-li">
                                    @* <i class="fa fa-puzzle-piece fa-2xs text-tertiary"></i> *@
                                    <svg class="bi" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="20" height="20" viewBox="0 0 48 48">
                                        <path id="yellow-g" d="M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12c0-6.627,5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24c0,11.045,8.955,20,20,20c11.045,0,20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z"></path>
                                        <path id="orange-g" d="M6.306,14.691l6.571,4.819C14.655,15.108,18.961,12,24,12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C16.318,4,9.656,8.337,6.306,14.691z"></path>
                                        <path id="green-g" d="M24,44c5.166,0,9.86-1.977,13.409-5.192l-6.19-5.238C29.211,35.091,26.715,36,24,36c-5.202,0-9.619-3.317-11.283-7.946l-6.522,5.025C9.505,39.556,16.227,44,24,44z"></path>
                                        <path id="blue-g" d="M43.611,20.083H42V20H24v8h11.303c-0.792,2.237-2.231,4.166-4.087,5.571c0.001-0.001,0.002-0.001,0.003-0.002l6.19,5.238C36.971,39.205,44,34,44,24C44,22.659,43.862,21.35,43.611,20.083z"></path>
                                    </svg>
                                </span>
                                <div class="ms-auto">

                                    E-mail
                                </div>
                            </a>
                        </li>
                        <li class="ps-0 ms-0 d-flex flex-column">
                            <a class="link icon-link icon-link-hover link-business-card fw-semibold" href="https://www.linkedin.com/in/software-developer-devin-freeman/" target="_blank">
                                <span class="fa-li">
                                    @* <i class="fa fa-puzzle-piece fa-2xs text-tertiary"></i> *@
                                    <svg id="linked-in" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-supported-dps="24x24" class="bi" width="24" height="24" focusable="false">
                                        <path d="M20.5 2h-17A1.5 1.5 0 002 3.5v17A1.5 1.5 0 003.5 22h17a1.5 1.5 0 001.5-1.5v-17A1.5 1.5 0 0020.5 2zM8 19H5v-9h3zM6.5 8.25A1.75 1.75 0 118.3 6.5a1.78 1.78 0 01-1.8 1.75zM19 19h-3v-4.74c0-1.42-.6-1.93-1.38-1.93A1.74 1.74 0 0013 14.19a.66.66 0 000 .14V19h-3v-9h2.9v1.3a3.11 3.11 0 012.7-1.4c1.55 0 3.36.86 3.36 3.66z"></path>
                                    </svg>
                                </span>
                                <div class=" ms-auto">
                                    LinkedIn
                                </div>
                            </a>

                        </li>
                        <li class="ps-0 ms-0 d-flex flex-column">
                            <a class="link icon-link icon-link-hover link-business-card fw-semibold" href="https://github.com/Dfreem" target="_blank">
                                <span class="fa-li">
                                    <i id="github" class="bi bi-github"></i>
                                </span>
                                <div class="ms-auto">
                                    GitHub
                                </div>
                            </a>

                        </li>
                    </ul>
                </div>
            </div>
            <div class="bg-theme-cornsilk m-0 p-0" id="mobile-message">
                <label class="text-600 h5">
                    Leave a Message
                </label>
                <fieldset class="d-flex">
                    <div class="d-flex flex-column mx-1">
                        <div class="input-group">
                            <label class="text-800 form-label me-1 input-label">Name</label>
                            <InputText DisplayName="Name" tabindex="1" class="form-control m-1" @bind-Value="@NewMessage.FromName">
                                <ValidationSummary Model="NewMessage"></ValidationSummary>

                            </InputText>
                        </div>
                        <div class="input-group">
                            <label class="text-800 form-label me-1 input-label">Email</label>
                            <InputText DisplayName="Email" tabindex="2" class="form-control m-1" @bind-Value="@NewMessage.FromEmail"></InputText>
                        </div>
                        <button class="btn btn-outline-tertiary border-2 d-flex m-1 px-3" tabindex="4" @onclick='Submit'>Send <i class="bi bi-send ms-auto"></i></button>
                    </div>
                    <InputTextArea class="textarea" tabindex="3" @bind-Value="@NewMessage.Body">

                    </InputTextArea>
                </fieldset>
            </div>
        </div>
        <div class="text-professional-grey-600" id="slogan"><b>I.T.</b> support for the <b>I.T.</b> support.</div>
    </div>
}

@code {
    public ContactMessage NewMessage { get; set; } = default!;

    public bool Initialized { get; set; }

    private bool _sent = false;

    private async Task Submit()
    {
        _sent = true;
        StateHasChanged();
        await Task.Delay(1000);
        using var context = await _factory.CreateDbContextAsync();
        await context.ContactMessages.AddAsync(NewMessage);
        var results = await context.SaveChangesAsync();
        if (results > 0)
        {
            _toast.Success($"Thank you for reaching out, {NewMessage.FromName}");
        }
        else
        {
            _toast.Error("Unable to send message at this time.\nPlease try again later.");
        }
        NewMessage = new() { Subject = "MOBILE" };
        _sent = false;
        StateHasChanged();
    }

    // Copy from Toast. TODO maybe pull a base class out of this
    [Parameter]
    public string ToastMessage { get; set; } = "Thank You!";

    [Parameter]
    public string ToastClass { get; set; } = "toast-default";

    Timer _timer = default!;

    public void OnToast(Object? sender, ToastEventArgs args)
    {
        _timer = new();
        _timer.Interval = 3000;

        ToastClass = args.CssClass;
        ToastMessage = args.Message;
        StateHasChanged();
        _timer.Elapsed += async (Object? sender, System.Timers.ElapsedEventArgs args) =>
        {
            _timer.Stop();
            await OffToast();
        };
        _timer.Start();
    }

    public async Task OffToast()
    {
        ToastClass = "toast-default";
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _toast.ToastEvent += OnToast;
        }

        await base.OnAfterRenderAsync(firstRender);
    }
    protected override async Task OnInitializedAsync()
    {

        NewMessage = new() { Subject = "MOBILE" };
        Initialized = true;
        await base.OnInitializedAsync();
    }

}
