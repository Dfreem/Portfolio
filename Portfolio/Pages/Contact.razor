@page "/contact"
@using static System.Net.Mime.MediaTypeNames
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Text
@using Microsoft.EntityFrameworkCore
@using System.Timers

@inject HttpClient _client;
@inject NavigationManager _nav
@inject IDbContextFactory<PortfolioDbContext> _factory
@inject ToastService _toast

<PageTitle>Contact Me</PageTitle>
<style>
    #body-input {
        margin-inline-end: 1rem;
        min-height: 16rem;
        max-height: 16rem;
        min-width: 20rem;
        max-width: 20rem;
    }

    #__black-hole {
        display: flex;
        position: absolute;
        bottom: 10%;
        left: 10%;
        cursor: pointer;
        font-size: 20pt;
    }

    body {
        transition: all 1s ease;
    }

        body > * {
            transition: all 1s ease;
        }

        body.on-transition > * {
            transition: all 1s ease;
            transform: translateX(2000%) !important;
        }

    #link-wrapper {
        position: absolute;
        top: 2rem;
        bottom: 5rem;
        right: 2rem;
        display: flex;
        flex-wrap: wrap;
        flex-direction: column;
        padding-bottom: .5rem;
        min-width: 350px;
        background-color: var(--bs-gray-700);
    }

    #message-wrapper {
        /* min-height: 400px; */
        max-height: 420px;
        min-width: 650px;
        max-width: 650px;
        position: absolute;
        bottom: 25%;
        left: 20%;
        display: flex;
        flex-wrap: wrap;
        flex-direction: column;
        padding-bottom: .5rem;
        background-color: var(--bs-gray-700);
    }


        #message-wrapper > button {
            margin-top: 10px;
            max-width: 8rem;
            border: 2px solid var(--bs-gray-600);
        }

        #message-wrapper input {
            margin-inline-end: 15px;
            line-height: 2rem;
            border: none;
            text-shadow: none;
        }

    input:hover, input:focus, a:any-link:focus, a:any-link:hover {
        text-shadow: none;
    }

    #message-wrapper input, #message-wrapper textarea {
        border: none;
        background-color: var(--bs-gray-600);
    }


    #discord-widget {
        min-height: 500px;
        margin-top: 0 !important;
    }

    .stamp img {
        margin-top: 5px;
        margin-bottom: 10px;
        margin-inline-start: auto;
        margin-inline-end: 10px;
        min-width: 35px;
        max-width: 35px;
        min-height: 35px;
        max-height: 35px;
        background-clip: content-box;
    }

    .stamp {
        line-height: 1rem;
        align-items: baseline;
        padding-bottom: 8px;
    }

    .card-header {
        background-color: var(--bs-gray-800);
        border-bottom: 2px solid var(--bs-tertiary);
    }


    #__light {
        position: absolute;
        top: 0;
        left: 0;
        min-height: 100em;
        max-height: 100em;
        min-width: 100em;
        max-width: 100em;
    }

    #__ray {
        position: absolute;
        opacity: .5;
        filter: sepia(.2);
        transform-origin: center;
        transform: translateX(-324px) translateY(-633px) rotateZ(55deg);
    }

    .glow {
        filter: url(#__spotlight);
    }


    .card, .card-header {
        box-shadow: 1px 0px 5px inset var(--bs-gray-600);
    }

    .link-box {
        background-color: var(--bs-gray-600);
        padding-block: .5rem;
        border-radius: 5px;
        border: 1px solid var(--bs-tertiary);
        filter: contrast(2);
        box-shadow: 1px 1px 5px 1px inset var(--bs-gray-800);
    }

        .link-box > * {
            transition: all .6s linear;
        }

    .text-shadow {
        text-shadow: 1px 1px 1px var(--bs-gray-800);
    }

    .link-box .link:hover {
        color: var(--bs-tertiary);
        filter: brightness(1.1) saturate(1.1);
    }

    .discord-wrap iframe {
        max-height: 65vh;
        min-height: 65vh;
        max-width: 100%;
        min-width: 100%;
    }

    .link:hover #resume {
        fill: #ff0600;
        color: #ff0600;
        transition: all .6s linear;
        --bs-link-hover-color: var(--bs-theme-cornsilk);
    }

    .link:hover #linked-in {
        fill: #378fe9;
        transition: all .6s linear;
    }

    .link:hover #github {
        color: black;
        transition: all .6s linear;
    }

    .link:hover #yellow-g {
        fill: #FFC107;
        transition: all .6s linear;
    }

    .link:hover #orange-g {
        fill: #FF3D00;
        transition: all .6s linear;
    }

    .link:hover #green-g {
        fill: #4CAF50;
        transition: all .6s linear;
    }

    .link:hover #blue-g {
        fill: #1976D2;
        transition: all .6s linear;
    }

</style>
<svg xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" width="100%" height="100%">
    <filter id="__spotlight">

        <feOffset in="SourceGraphic" dx="0" dy="0" result="offsetBlur"></feOffset>
        <!-- highlight -->
        <feSpecularLighting in="SourceGraphic" surfaceScale="5" specularConstant=".75" specularExponent="20" result="highlight" lighting-color="var(--bs-orange-400)">
            <!-- e908e8a4-6734-4b6f-92c6-efa00cfcd7cd -->
            <fePointLight x="1000" y="1000" z="20000" result="e908e8a4-6734-4b6f-92c6-efa00cfcd7cd"></fePointLight>
        </feSpecularLighting>
        <!-- highlightApplied -->
        <feComposite in="highlight" in2="SourceAlpha" operator="in" result="highlightApplied"></feComposite>
        <!-- highlightText -->
        <feComposite in="SourceGraphic" in2="highlightApplied" operator="arithmetic" k2="1" k3="1" result="highlightText"></feComposite>
        <!-- 44fb9371-7ca1-47fd-bda4-446a0eeffff8 -->
        <feMerge result="44fb9371-7ca1-47fd-bda4-446a0eeffff8">
            <feMergeNode in="offsetBlur"></feMergeNode>
            <feMergeNode in="highlightText"></feMergeNode>
        </feMerge>
    </filter>

</svg>

<body class="@(Transitioning ? "on-transition" : "")">

    <div class="position-absolute left-10 top-0 mt-5">
        <text class="glow fs-1">
            How To Reach Me

        </text>
    </div>

    <div id="__light">
        <img id="__ray" src="images/light-ray.png" />
    </div>


    <EditForm OnSubmit="Submit" Model="NewMessage">
        <div class="container">
            <div id="message-wrapper" class="card">
                <div class="stamp h3 text-orange-300 d-flex card-header">
                    Leave Me a Message

                    <img src="images/face2.png" />
                </div>
                <div class="card-body p-0">

                    <div class="hstack my-2">
                        <div class="vstack mx-2">


                            <div class="form-input mx-2 mt-2">

                                <label class="form-input mb-1 text-orange-300">Subject</label>
                                <InputText class="form-control" id="subject-input" @bind-Value="NewMessage.Subject"></InputText>
                            </div>
                            <div class="mx-2 form-input mt-1">
                                <label class="form-label mt-1 text-orange-300">Email</label>
                                <InputText class="form-control" id="from-email" @bind-Value="NewMessage.FromEmail"></InputText>
                            </div>
                            <div class="form-input mx-2 mt-1">
                                <label class="form-label mt-1 text-orange-300">Name</label>
                                <InputText class="form-control" id="from-name" @bind-Value="NewMessage.FromName"></InputText>
                            </div>
                            <div class="form-input mx-2 mt-1 mb-1">
                                <button type="submit" class="mt-2 btn btn-tertiary">Submit</button>

                            </div>
                        </div>
                        <div class="form-input">
                            <label class="form-label text-input text-orange-300">Write a Message</label>
                            <InputTextArea class="form-control" id="body-input" @bind-Value='NewMessage.Body'></InputTextArea>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>

    <div class="container">

        <div id="link-wrapper" class="card">

            <div class="stamp d-flex card-header">
                <div class="text-orange-300 fs-3">
                    Links
                </div>
                <img src="images/face2.png" />
            </div>
            <div class="card-body d-flex flex-column nav">
                <div class="link-box">

                    <div class="card-title text-center">

                        <a class="icon-link icon-link-hover mx-auto link link-orange-500">

                            <span class="text-shadow">
                                My Resume
                            </span>
                            <i id="resume" class="bi bi-file-earmark-person">
                            </i>
                        </a>
                    </div>
                    <ul class="nav">
                        <li class="nav-item nav-link col">
                            <a class="icon-link icon-link-hover mx-auto link link-orange-500" href="mailto:dfreem987@gmail.com" target="_blank">
                                <span class="text-shadow">
                                    Gmail
                                </span>
                                <svg class="bi" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="20" height="20" viewBox="0 0 48 48">
                                    <path id="yellow-g" fill="var(--bs-tertiary)" d="M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12c0-6.627,5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24c0,11.045,8.955,20,20,20c11.045,0,20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z"></path>
                                    <path id="orange-g" fill="var(--bs-tertiary)" d="M6.306,14.691l6.571,4.819C14.655,15.108,18.961,12,24,12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C16.318,4,9.656,8.337,6.306,14.691z"></path>
                                    <path id="green-g" fill="var(--bs-tertiary)" d="M24,44c5.166,0,9.86-1.977,13.409-5.192l-6.19-5.238C29.211,35.091,26.715,36,24,36c-5.202,0-9.619-3.317-11.283-7.946l-6.522,5.025C9.505,39.556,16.227,44,24,44z"></path>
                                    <path id="blue-g" fill="var(--bs-tertiary)" d="M43.611,20.083H42V20H24v8h11.303c-0.792,2.237-2.231,4.166-4.087,5.571c0.001-0.001,0.002-0.001,0.003-0.002l6.19,5.238C36.971,39.205,44,34,44,24C44,22.659,43.862,21.35,43.611,20.083z"></path>
                                </svg>


                            </a>
                        </li>
                        <li class="nav-item nav-link col">
                            <a class="icon-link icon-link-hover mx-auto link link-orange-500" href="https://www.linkedin.com/in/software-developer-devin-freeman/" target="_blank">
                                <span class="text-shadow">
                                    LinkedIn
                                </span>
                                <svg id="linked-in" fill="currentColor" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-supported-dps="24x24" class="bi" width="24" height="24" focusable="false">
                                    <path d="M20.5 2h-17A1.5 1.5 0 002 3.5v17A1.5 1.5 0 003.5 22h17a1.5 1.5 0 001.5-1.5v-17A1.5 1.5 0 0020.5 2zM8 19H5v-9h3zM6.5 8.25A1.75 1.75 0 118.3 6.5a1.78 1.78 0 01-1.8 1.75zM19 19h-3v-4.74c0-1.42-.6-1.93-1.38-1.93A1.74 1.74 0 0013 14.19a.66.66 0 000 .14V19h-3v-9h2.9v1.3a3.11 3.11 0 012.7-1.4c1.55 0 3.36.86 3.36 3.66z"></path>
                                </svg>
                            </a>
                        </li>
                        <li class="nav-item nav-link col">
                            <a class="icon-link icon-link-hover mx-auto link link-orange-500" href="https://github.com/Dfreem" target="_blank">
                                <span class="text-shadow">
                                    GitHub

                                </span>
                                <i id="github" class="bi bi-github"></i>
                            </a>
                        </li>
                    </ul>
                </div>
                <div class="mt-auto discord-wrap">

                    <iframe src="https://discord.com/widget?id=1036788810572374087&theme=dark"
                            allowtransparency="true"
                            frameborder="0"
                            sandbox="allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts"></iframe>

                </div>
            </div>
        </div>
    </div>
    <a id="__black-hole" class="icon-link icon-link-hover link-tertiary" @onclick='(() => OnNavigate("/"))'>
        <i class="bi bi-arrow-left" style="transform: translateX(-.125em);"> </i>
        <div>
            <text class="point-light">Home</text>
        </div>
    </a>
</body>



@code {

    string _toUrl = string.Empty;

    Timer _timer = default!;

    public bool Transitioning { get; set; }

    public ContactMessage NewMessage { get; set; } = default!;

    private async Task Submit()
    {

        var context = await _factory.CreateDbContextAsync();
        context.ContactMessages.Add(NewMessage);
        var results = context.SaveChanges();
        Console.WriteLine(results.ToString());
        NewMessage = new();
    }
    public void OnNavigate(string url = "")
    {
        _toUrl = url;
        Transitioning = !Transitioning;
        StateHasChanged();
        _timer = new Timer();
        _timer.Interval = 500;
        _timer.Elapsed += TransitionTimerElapsed;
        _timer.Start();
        NewMessage = new();

    }


    private void TransitionTimerElapsed(Object? sender, ElapsedEventArgs args)
    {
        _timer.Stop();
        if (_toUrl != string.Empty)
        {
            _nav.NavigateTo(_toUrl);
        }
    }
    protected override async Task OnInitializedAsync()
    {
        _nav.LocationChanged += (Object? sender, LocationChangedEventArgs args) =>
        {

            OnNavigate();
        };
        NewMessage = new();
        await base.OnInitializedAsync();
    }
}

