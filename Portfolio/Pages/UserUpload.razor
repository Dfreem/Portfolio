@page "/user-upload"
@layout UserContentLayout


@inject IJSRuntime JS
@inject HttpClient Client
@inject ILogger<UserUpload> Logger
@inject ProtectedSessionStorage Session
@* @inject WebFileHandler FileHandler *@

@if (isConnected && CssString is not null)
{
    <style>
        @CssString
    </style>
}
<link rel="stylesheet" href="/scss/custom.css" /> 
<div id="__user-content">

</div>
    
@if (!isConnected)
{
    <div>Connecting ...</div>
}

@code {
    private bool isConnected;

    public WebFileHandler FileHandler { get; set; } = default!;

    public string? CssString { get; set; }
    protected override async Task OnParametersSetAsync()
    {

        await base.OnParametersSetAsync();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isConnected = true;
            await LoadUserContentAsync();
            StateHasChanged();
        }

    }
    private async Task LoadUserContentAsync()
    {


        var module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/UserUpload.razor.js");
        var results = await Session.GetAsync<string>("htmlContent");
        if (results.Success)
        {
            await module.InvokeVoidAsync("applyContent", results.Value!);

        }
        var cssResults = await Session.GetAsync<string>("cssContent");
        if (cssResults.Success)
        {
            CssString = cssResults.Value!;
        }
        StateHasChanged();
    }
    // await module.InvokeVoidAsync("applyContent", FileHandler?.BrowserCss?.OpenReadStream());
    // using var stream = FileHandler?.BrowserCss?.OpenReadStream();
    // if (stream is not null)
    // {
    //     using var reader = new StreamReader(stream!);
    //     Markup = new(reader.ReadToEnd());

    // }
    // using var cssStream = FileHandler?.BrowserCss?.OpenReadStream();
    // if (cssStream != null)
    // {
    //     using var cssReader = new StreamReader(cssStream);
    //     CssString = cssReader.ReadToEnd();
    // }
}
